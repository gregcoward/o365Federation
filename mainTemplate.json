{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/gregcoward/o365Federation/master",
      "metadata": {
        "description": "The base URL for marketplace deployment.",
        "artifactsBaseUrl": ""
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "westus",
      "metadata": {
        "description": "The Azure location hosting the resource"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "The BIG-IP administrator username."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The BIG-IP administrator password."
      }
    },
    "sshPublicKey": {
      "type": "string",
      "metadata": {
        "description": "The BIG-IP ssh public key."
      }
    },
    "authenticationType": {
      "type": "string",
      "metadata": {
        "description": "The type of auth utilized - password or ssh public key"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "The size of the Virtual Hardware Instance."
      }
    },
    "licenseToken": {
      "type": "string",
      "metadata": {
        "description": "The License Token for the first BYOL F5 Web Application Firewall."
      }
    },
    "authFqdn": {
      "type": "string",
      "metadata": {
        "description": "Specify your Active Directory domain controller FQDN."
      }
    },
    "authIp": {
      "type": "string",
      "metadata": {
        "description": "Specify your Active Directory domain controller IP."
      }
    },
    "domainFqdn": {
      "type": "string",
      "metadata": {
        "description": "Specify the FQDN of the Active Directory deployment for your Office 365 users. This is the FQDN for your domain, such as example.com, rather than the FQDN for any specific host."
      }
    },
    "dnsFqdn": {
      "type": "string",
      "metadata": {
        "description": "The public federation endpoint FQDN"
      }
    },
    "sslCert": {
      "type": "string",
      "metadata": {
        "description": "The SSL certificate .pfx file corresponding to public facing VIP."
      }
    },
    "sslPswd": {
      "type": "securestring",
      "metadata": {
        "description": "The SSL certificate .pfx file corresponding to public facing VIP."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "Vnet",
      "metadata": {
        "description": "Specify the virtual network name."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.0.0/16",
      "metadata": {
        "description": "Specify the virtual network address space."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "subnet1",
      "metadata": {
        "description": "Specify the virtual subnet name wher the BIG-IP will reside."
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.1.0/24",
      "metadata": {
        "description": "Specify the virtual subnet address space."
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "New or Existing Virtual Network"
      }
    },
    "vnetExistingRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Existing Virtual Network name"
      }
    }
  },
  "variables": {
    "apiVersionCompute": "2015-06-15",
    "apiVersionNetwork": "2015-06-15",
    "apiVersionStorage": "2015-06-15",
    "linkTemplateApiVersion": "2015-01-01",
    "dnsNameForPublicIP": "[concat('f5', uniqueString(resourceGroup().id))]",
    "entityId": "[concat('https://',trim(parameters('dnsFqdn')),'/idp/f5/')]",
    "vnetLink": "[concat(parameters('baseUrl'),'/',parameters('vnetNewOrExisting'),'vnet.json')]",
    "loadBalancerName": "[concat(variables('bigipNamePrefix'),'-alb')]",
    "bigipLink": "[concat(parameters('baseUrl'),'/bigip.json')]",
    "availabilitySetName": "[concat(variables('bigipNamePrefix'),'-avset')]",
    "appPort": 6443,
    "newStorageAccountName": "[concat(tolower(variables('dnsNameForPublicIP')),'stor')]",
    "bigipNamePrefix": "bigip",
    "nicNamePrefix": "bigip-nic",
    "niId": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicNamePrefix'))]",
    "publicIPName": "[concat(variables('bigipNamePrefix'),'-ip')]",
    "scriptName": "o365FedDeploy.sh",
    "scriptLoc": "[concat(parameters('baseUrl'),'/',variables('scriptName'))]",
    "iappTemplate": "f5.microsoft_office_365_idp.v1.1.0.tmpl",
    "iappUrl": "[concat(parameters('baseUrl'),'/',variables('iappTemplate'))]",
    "vnetId": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",
    "asId": "[resourceId('Microsoft.Network/availabilitySets',variables('availabilitySetName'))]",
    "lbId": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "publicIPID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
    "singleQuote": "'",
       "commandArgs": "[concat(' -i ', '10.10.1.4',' -p ',variables('appPort'),' -e ', variables('entityId'),' -d ', parameters('authFqdn'),' -a ', parameters('authIp'),' -f ', parameters('domainfqdn'),' -c ', parameters('sslCert'),' -w ', parameters('sslPswd'),' -x ', parameters('adminPassword'),' -u ', variables('iappUrl'))]"
  },
  "resources": [
    {
      "name": "[variables('newStorageAccountName')]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('location')]",
      "apiVersion": "[variables('apiVersionStorage')]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "virtualNetworkTemplate",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('vnetLink')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "apiVersionNetwork": {
            "value": "[variables('apiVersionNetwork')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefix')]"
          },
          "vnetExistingRGName": {
            "value": "[parameters('vnetExistingRGName')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "PublicIPAddress"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForPublicIP')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/loadBalancers",
      "tags": {
        "displayName": "AzureLoadBalancer"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('loadBalancerName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[concat('loadBalancerFrontEnd', '1')]",
            "properties": {
              "publicIPAddress": {
                "id": "[concat(variables('publicIPID'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ],
        "loadBalancingRules": [
          {
            "Name": "APP1-HTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/lbprobeHTTPS', '1')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 6443,
              "idleTimeoutInMinutes": 15
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 6443,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[concat('lbprobeHTTPS', '1')]"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "tags": {
        "displayName": "InboundNATRulesGUI"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/guimgt')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('frontEndIPConfigID'), '1')]"
        },
        "protocol": "tcp",
        "frontendPort": 8443,
        "backendPort": 443,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "tags": {
        "displayName": "InboundNATRulesSSH"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/sshmgt')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('frontEndIPConfigID'), '1')]"
        },
        "protocol": "tcp",
        "frontendPort": 8022,
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('apiVersionCompute')]",
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "location": "[parameters('location')]",
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicNamePrefix')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat(variables('lbId'),'/inboundNatRules/guimgt')]",
        "[concat(variables('lbId'),'/inboundNatRules/sshmgt')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbId'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
                }
              ],

              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/', 'sshmgt')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/', 'guimgt')]"
                }
              ]
            }
          }
        ]
      }
    },  
    {
      "apiVersion": "[variables('linkTemplateApiVersion')]",
      "name": "bigipDeployTemplate",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountName'))]",
        "[concat(variables('lbId'),'/inboundNatRules/guimgt')]",
        "[concat(variables('lbId'),'/inboundNatRules/sshmgt')]",
        "virtualNetworkTemplate"
      ],
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('bigipLink')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersionCompute": {
            "value": "[variables('apiVersionCompute')]"
          },
          "apiVersionNetwork": {
            "value": "[variables('apiVersionNetwork')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "bigipNamePrefix": {
            "value": "[variables('bigipNamePrefix')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "authenticationType": {
            "value": "[parameters('authenticationType')]"
          },
          "sshPublicKey": {
            "value": "[parameters('sshPublicKey')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "availabilitySetName": {
            "value": "[variables('availabilitySetName')]"
          },
          "subnetRef": {
            "value": "[variables('subnetRef')]"
          },
          "lbId": {
            "value": "[variables('lbId')]"
          },
          "asId": {
            "value": "[variables('asId')]"
          },
          "niId": {
            "value": "[variables('niId')]"
          },
          "newStorageAccountName": {
            "value": "[variables('newStorageAccountName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('bigipNamePrefix'),'/start')]",
      "apiVersion": "[variables('apiVersionCompute')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "bigipDeployTemplate"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": [
            "https://f5cloudlibs.blob.core.windows.net/archive/runScripts.js"
          ]
        },
        "protectedSettings": {
         "commandToExecute": "[concat('f5-rest-node ./runScripts.js --log-level debug --onboard \" --output /var/log/onboard.log --log-level debug --host ', '10.10.1.4', ' -u admin -p ', parameters('adminPassword'), ' --hostname ', concat(variables('bigipNamePrefix'), '.', parameters('domainFqdn')), ' --set-password admin:', parameters('adminPassword'), ' --license ', parameters('licenseToken'), ' --db provision.1nicautoconfig:disable --db tmm.maxremoteloglength:2048 --module ltm:nominal --module asm:none --module apm:nominal --module afm:none --signal ONBOARD_DONE \" --script \" --wait-for ONBOARD_DONE --output /var/log/runScript.log --log-level debug --url ',variables('scriptLoc'),' --cl-args ', variables('singleQuote'), variables('commandArgs'), variables('singleQuote'), '\"')]"
        }
      }
    }
  ],
    "outputs": {
    }
  }

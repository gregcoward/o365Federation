{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/gregcoward/o365Federation/master",
      "metadata": {
        "description": "The base URL for marketplace deployment.",
        "artifactsBaseUrl": ""
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "westus",
      "metadata": {
        "description": "The Azure location hosting the resource"
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of F5 BIG-IPs that will be deployed as federation servers."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "The BIG-IP administrator username."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The BIG-IP administrator password."
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The BIG-IP ssh public key."
      }
    },
    "authenticationType": {
      "type": "string",
      "metadata": {
        "description": "The type of auth utilized - password or ssh public key"
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "The size of the Virtual Hardware Instance."
      }
    },
    "licenseModel": {
      "type": "string",
      "metadata": {
        "description": "The licensing model, either hourly or byol."
      }
    },
    "licenseToken1": {
      "type": "string",
      "metadata": {
        "description": "The License Token for the first F5 BIG-IP."
      }
    },
    "licenseToken2": {
      "type": "string",
      "metadata": {
        "description": "The License Token for the second BYOL F5 BIG-IP."
      }
    },
    "authFqdn": {
      "type": "string",
      "metadata": {
        "description": "Specify your Active Directory domain controller FQDN."
      }
    },
    "authIp": {
      "type": "string",
      "metadata": {
        "description": "Specify your Active Directory domain controller IP."
      }
    },
    "domainFqdn": {
      "type": "string",
      "metadata": {
        "description": "Specify the FQDN of the Active Directory deployment for your Office 365 users. This is the FQDN for your domain, such as example.com, rather than the FQDN for any specific host."
      }
    },
    "dnsFqdn": {
      "type": "string",
      "metadata": {
        "description": "The public federation endpoint FQDN"
      }
    },
    "sslCert": {
      "type": "string",
      "metadata": {
        "description": "The SSL certificate .pfx file corresponding to public facing VIP."
      }
    },
    "sslPswd": {
      "type": "securestring",
      "metadata": {
        "description": "The SSL certificate .pfx file corresponding to public facing VIP."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "Vnet",
      "metadata": {
        "description": "Specify the virtual network name."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.0.0/16",
      "metadata": {
        "description": "Specify the virtual network address space."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "subnet1",
      "metadata": {
        "description": "Specify the virtual subnet name wher the BIG-IP will reside."
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.1.0/24",
      "metadata": {
        "description": "Specify the virtual subnet address space."
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "New or Existing Virtual Network"
      }
    },
    "vnetExistingRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Existing Virtual Network name"
      }
    }
  },
  "variables": {
    "apiVersionCompute": "2016-03-30",
    "apiVersionNetwork": "2015-06-15",
    "apiVersionStorage": "2015-06-15",
    "linkTemplateApiVersion": "2015-01-01",
    "dnsNameForPublicIP": "[concat('f5', uniqueString(resourceGroup().id))]",
    "entityId": "[concat('https://',trim(parameters('dnsFqdn')),'/idp/f5/')]",
    "vnetLink": "[concat(parameters('baseUrl'),'/',parameters('vnetNewOrExisting'),'vnet.json')]",
    "loadBalancerName": "[concat(variables('bigipNamePrefix'),'-alb')]",
    "bigipLink": "[concat(parameters('baseUrl'),'/bigip-',parameters('licenseModel'),parameters('numberOfInstances'),'.json')]",
    "availabilitySetName": "[concat(variables('bigipNamePrefix'),'-avset')]",
    "appPort": 6443,
    "newStorageAccountName": "[concat(tolower(variables('dnsNameForPublicIP')),'stor')]",
    "bigipNamePrefix": "bigip",
    "nicNamePrefix": "bigip-nic",
    "nicStop": "[concat(variables('nicNamePrefix'),parameters('numberOfInstances'))]",
    "publicIPName": "[concat(variables('bigipNamePrefix'),'-ip')]",
    "scriptName": "o365FedDeploy.sh",
    "scriptLoc": "[concat(parameters('baseUrl'),'/',variables('scriptName'))]",
    "iappTemplate": "f5.microsoft_office_365_idp.v1.1.0.tmpl",
    "iappUrl": "[concat(parameters('baseUrl'),'/',variables('iappTemplate'))]",
    "runScripts": "runScripts.js",
    "runScriptsUrl": "[concat(parameters('baseUrl'),'/',variables('runScripts'))]",
    "asId": "[resourceId('Microsoft.Network/availabilitySets',variables('availabilitySetName'))]",
    "lbId": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "publicIpId": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
    "f5CloudLibsTag": "develop",
    "f5CloudLibsTagUrl": "[concat(parameters('baseUrl'),'/',variables('f5CloudLibsTag'))]",
    "commandArgs": "[concat(' -p ',variables('appPort'),' -e ', variables('entityId'),' -d ', parameters('authFqdn'),' -a ', parameters('authIp'),' -f ', parameters('domainfqdn'),' -c ', parameters('sslCert'),' -w ', parameters('sslPswd'),' -x ', parameters('adminPassword'),' -u ', variables('iappUrl'))]"
  },
  "resources": [
    {
      "name": "[variables('newStorageAccountName')]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('location')]",
      "apiVersion": "[variables('apiVersionStorage')]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "virtualNetworkTemplate",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('vnetLink')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "apiVersionNetwork": {
            "value": "[variables('apiVersionNetwork')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefix')]"
          },
          "vnetExistingRGName": {
            "value": "[parameters('vnetExistingRGName')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersionCompute')]",
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "location": "[parameters('location')]",
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "PublicIPAddress"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForPublicIP')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/loadBalancers",
      "tags": {
        "displayName": "AzureLoadBalancer"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('loadBalancerName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[concat('loadBalancerFrontEnd', '1')]",
            "properties": {
              "publicIPAddress": {
                "id": "[concat(variables('publicIpId'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ],
        "loadBalancingRules": [
          {
            "Name": "APP1-HTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/lbprobeHTTPS', '1')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 6443,
              "idleTimeoutInMinutes": 15
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 6443,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[concat('lbprobeHTTPS', '1')]"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "tags": {
        "displayName": "InboundNATRulesSSH"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/sshmgt', copyIndex(1))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('frontEndIPConfigID'), '1')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8022)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "tags": {
        "displayName": "InboundNATRulesGUI"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/guimgt', copyIndex(1))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('frontEndIPConfigID'), '1')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8443)]",
        "backendPort": 443,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('linkTemplateApiVersion')]",
      "name": "bigipDeployTemplate",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountName'))]",
        "virtualNetworkTemplate"
      ],
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('bigipLink')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersionCompute": { "value": "[variables('apiVersionCompute')]" },
          "apiVersionNetwork": { "value": "[variables('apiVersionNetwork')]" },
          "location": { "value": "[parameters('location')]" },
          "loadBalancerName": { "value": "[variables('loadBalancerName')]" },
          "numberOfInstances": { "value": "[parameters('numberofInstances')]" },
          "licenseToken1": { "value": "[parameters('licenseToken1')]" },
          "licenseToken2": { "value": "[parameters('licenseToken2')]" },
          "bigipNamePrefix": { "value": "[variables('bigipNamePrefix')]" },
          "adminUsername": { "value": "[parameters('adminUsername')]" },
          "adminPassword": { "value": "[parameters('adminPassword')]" },
          "authenticationType": { "value": "[parameters('authenticationType')]" },
          "sshPublicKey": { "value": "[parameters('sshPublicKey')]" },
          "instanceType": { "value": "[parameters('instanceType')]" },
          "availabilitySetName": { "value": "[variables('availabilitySetName')]" },
          "asId": { "value": "[variables('asId')]" },
          "nicNamePrefix": { "value": "[variables('nicNamePrefix')]" },
          "newStorageAccountName": { "value": "[variables('newStorageAccountName')]" },
          "runScriptsUrl": { "value": "[variables('runScriptsUrl')]" },
          "f5CloudLibsTagUrl": { "value": "[variables('f5CloudLibsTagUrl')]" },
          "f5CloudLibsTag": { "value": "[variables('f5CloudLibsTag')]" },
          "domainFqdn": { "value": "[parameters('domainFqdn')]" },
          "commandArgs": { "value": "[variables('commandArgs')]" },
          "scriptLoc": { "value": "[variables('scriptLoc')]" },
          "lbId": { "value": "[variables('lbId')]" },
          "subnetId": { "value": "[concat(reference('virtualNetworkTemplate').outputs.vnetID.value,'/subnets/',parameters('subnetName'))]" }
        }
      }
    }
  ],
  "outputs": {
    "GUI-URL": {
      "type": "string",
      "value": "[concat('https://',reference(variables('publicIpId')).dnsSettings.fqdn,':8443')]"
    },
    "SSH-URL": {
      "type": "string",
      "value": "[concat(reference(variables('publicIpId')).dnsSettings.fqdn,' ',8022)]"
    }
  }
  }

{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "The BIG-IP administrator username."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The BIG-IP administrator password."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A3",
      "metadata": {
        "description": "The size of the Virtual Hardware Instance."
      }
    },
    "licenseToken1": {
      "type": "string",
      "metadata": {
        "description": "The License Token for the first BYOL F5 Web Application Firewall."
      }
    },
    "authFqdn": {
      "type": "string",
      "metadata": {
        "description": "Specify your Active Directory domain controller FQDN."
      }
    },
    "authIp": {
      "type": "string",
      "metadata": {
        "description": "Specify your Active Directory domain controller IP."
      }
    },
    "domainFqdn": {
      "type": "string",
      "metadata": {
        "description": "Specify the FQDN of the Active Directory deployment for your Office 365 users. This is the FQDN for your domain, such as example.com, rather than the FQDN for any specific host."
      }
    },
    "dnsFqdn": {
      "type": "string",
      "metadata": {
        "description": "The public federation endpoint FQDN"
      }
    },
    "sslCert": {
      "type": "string",
      "metadata": {
        "description": "The SSL certificate .pfx file corresponding to public facing VIP."
      }
    },
    "sslPswd": {
      "type": "string",
      "metadata": {
        "description": "The SSL certificate .pfx file corresponding to public facing VIP."
      }
    }
  },
  "variables": {
    "dnsNameForPublicIP": "[concat('f5', uniqueString(resourceGroup().id))]",
    "entityId": "[concat('https://',trim(parameters('dnsFqdn')),'/idp/f5/')]",
    "numberOfBIGIPs": 1,
    "location": "[resourceGroup().location]",
    "virtualNetworkName": "VNet",
    "loadBalancerName": "bigip-alb",
    "publicIPName": "bigip-ip",
    "vnetAddressPrefix": "10.10.0.0/16",
    "extsubnetName": "external",
    "extsubnetPrefix": "10.10.1.0/24",
    "intsubnetName": "internal",
    "intsubnetPrefix": "10.10.2.0/24",
    "ipAddress": "10.10.1.1",
    "nicNamePrefix": "bigip-nic",
    "availabilitySetName": "bigip-avset",
    "appPort": 6443,
    "newStorageAccountName": "[concat(tolower(variables('dnsNameForPublicIP')),'stor')]",
    "bigipNamePrefix": "bigip",
    "baseUrl": "https://raw.githubusercontent.com/gregcoward/o365Federation/master/",
    "scriptName": "o365FedDeploy.sh",
    "scriptLoc": "[concat(variables('baseUrl'),variables('scriptName'))]",
    "iappTemplate": "f5.microsoft_office_365_idp.v1.1.0.tmpl",
    "iappUrl": "[concat(variables('baseUrl'),variables('iappTemplate'))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('extsubnetName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "publicIPID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
    "singleQuote": "'",
    "commandArgs": "[concat(' -i ', variables('ipAddress'),'0',' -p ',variables('appPort'),' -e ', variables('entityId'),' -d ', parameters('authFqdn'),' -a ', parameters('authIp'),' -f ', parameters('domainfqdn'),' -c ', parameters('sslCert'),' -w ', parameters('sslPswd'),' -x ', parameters('adminPassword'),' -u ', variables('iappUrl'))]"
  },
  "resources": [
    {
      "name": "[variables('newStorageAccountName')]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[variables('location')]",
      "apiVersion": "2015-06-15",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "VirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('extsubnetName')]",
            "properties": {
              "addressPrefix": "[variables('extsubnetPrefix')]"
            }
          },
          {
            "name": "[variables('intsubnetName')]",
            "properties": {
              "addressPrefix": "[variables('intsubnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "PublicIPAddress"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForPublicIP')]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNamePrefix'),copyindex())]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'),'/inboundNatRules/guimgt', copyIndex())]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'),'/inboundNatRules/sshmgt', copyIndex())]"
      ],
      "copy": {
        "count": "[variables('numberOfBIGIPs')]",
        "name": "niccopy"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('ipAddress'),add(0,copyindex()))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
                }
              ],

              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'), '/inboundNatRules/', 'sshmgt', copyIndex())]"
                },
                {
                  "id": "[concat(variables('lbID'), '/inboundNatRules/', 'guimgt', copyIndex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "AzureLoadBalancer"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('loadBalancerName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[concat('loadBalancerFrontEnd', '1')]",
            "properties": {
              "publicIPAddress": {
                "id": "[concat(variables('publicIPID'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ],
        "loadBalancingRules": [
          {
            "Name": "APP1-HTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/lbprobeHTTPS', '1')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 6443,
              "idleTimeoutInMinutes": 15
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 6443,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[concat('lbprobeHTTPS', '1')]"
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "InboundNATRulesGUI"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/guimgt', copyIndex())]",
      "location": "[variables('location')]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[variables('numberOfBIGIPs')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('frontEndIPConfigID'), '1')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8443)]",
        "backendPort": 443,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "InboundNATRulesSSH"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/sshmgt', copyIndex())]",
      "location": "[variables('location')]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[variables('numberOfBIGIPs')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('frontEndIPConfigID'), '1')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8022)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "location": "[variables('location')]",
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('bigipNamePrefix'),copyindex())]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "BIG-IPs"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNamePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]"
      ],
      "copy": {
        "count": "[variables('numberOfBIGIPs')]",
        "name": "bigipcopy"
      },
      "plan": {
        "name": "f5-bigip-virtual-edition-best-byol",
        "publisher": "f5-networks",
        "product": "f5-big-ip"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('bigipNamePrefix'),copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "f5-networks",
            "offer": "f5-big-ip",
            "sku": "f5-bigip-virtual-edition-best-byol",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat('osdisk',copyindex())]",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('newStorageAccountName'),'/osDisk',copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[concat(resourceId('Microsoft.Network/networkInterfaces',variables('nicNamePrefix')),copyindex())]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('newstorageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('bigipNamePrefix'),copyindex(),'/start')]",
      "apiVersion": "2016-03-30",
      "location": "[variables('location')]",
      "copy": {
        "count": "[variables('numberOfBIGIPs')]",
        "name": "bigipcopy"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('bigipNamePrefix'),copyindex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": [
            "https://f5cloudlibs.blob.core.windows.net/archive/runScripts.js"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('f5-rest-node ./runScripts.js --log-level debug --onboard \" --output /var/log/onboard.log --log-level debug --host ', concat(variables('ipAddress'), copyindex()), ' -u admin -p ', parameters('adminPassword'), ' --hostname ', concat(variables('bigipNamePrefix'), copyindex(), '.', parameters('domainFqdn')), ' --set-password admin:', parameters('adminPassword'), ' --license ', parameters('licenseToken1'), ' --db provision.1nicautoconfig:disable --db tmm.maxremoteloglength:2048 --module ltm:nominal --module asm:none --module apm:nominal --module afm:none --signal ONBOARD_DONE \" --script \" --wait-for ONBOARD_DONE --output /var/log/runScript.log --log-level debug --url ',variables('scriptLoc'),' --cl-args ', variables('singleQuote'), variables('commandArgs'), variables('singleQuote'), '\"')]"
        }
      }
    }
  ],
      "outputs": {
      }
    }
